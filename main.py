import logging
import time

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (Application, CommandHandler, ContextTypes,
                          ConversationHandler, MessageHandler, filters)
from typing import Dict

from multiprocessing import Process
#from G2P import G2P
from Database import Database

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–¥–∏–∏ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CHOOSING_OPER, REPORT_REPLY, SPEACH_FORMAT, SPEACH_SPEAKER, SPEACH_TEXT, SPEACH_REPLY = range(6)
# ---------------------------------------------------------------------------------------------------

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
reply_report_keyboard_commit = [
    ["–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á—ë—Ç"],
    ["–û—Ç–º–µ–Ω–∞"],
]
markup_report_commit = ReplyKeyboardMarkup(reply_report_keyboard_commit, one_time_keyboard=True)

reply_speach_keyboard_commit = [
    ["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å"],
    ["–û—Ç–º–µ–Ω–∞"],
]
markup_speach_commit = ReplyKeyboardMarkup(reply_speach_keyboard_commit, one_time_keyboard=True)

reply_oper_keyboard = [
    ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏"],
    ["–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"],
    ["–û—Ç–º–µ–Ω–∞"],
]
markup_oper = ReplyKeyboardMarkup(reply_oper_keyboard, one_time_keyboard=True)

reply_format_keyboard = [
    ["WAV"],
    ["OGG"],
    ["MP3"],
    ["–û—Ç–º–µ–Ω–∞"]
]
markup_format = ReplyKeyboardMarkup(reply_format_keyboard, one_time_keyboard=True)

reply_speaker_keyboard = [
    ["RUSLAN"],
    ["–ê—Ä—Ç–µ–º–∏–π –õ–µ–±–µ–¥–µ–≤"],
    ["–û—Ç–º–µ–Ω–∞"]
]
markup_speaker = ReplyKeyboardMarkup(reply_speaker_keyboard, one_time_keyboard=True)

reply_speach_keyboard_commit = [
    ["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å"],
    ["–û—Ç–º–µ–Ω–∞"],
]
markup_speach_commit = ReplyKeyboardMarkup(reply_speach_keyboard_commit , one_time_keyboard=True)
# ---------------------------------------------------------------------------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–≤—É–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã."
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.",
        reply_markup=markup_oper,
    )

    return CHOOSING_OPER

#–í—ã–±—Ä–∞–Ω –æ—Ç—á—ë—Ç
async def report_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print('report_choice')
    text = update.message.text
    context.user_data["type_oper"] = text
    await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ \"{text}\".", reply_markup=markup_report_commit)

    return REPORT_REPLY

#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á—ë—Ç
async def report_commit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print('report_commit')

    await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
                                    f"–û–ø–µ—Ä–∞—Ü–∏—è: {context.user_data['type_oper']}\n",
                                    reply_markup=ReplyKeyboardRemove())

    context.user_data.clear()
    return ConversationHandler.END

#–í—ã–±—Ä–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏
async def speach_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print('speach_choice')
    text = update.message.text
    context.user_data["type_oper"] = text
    await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ \"{text}\".", reply_markup=markup_format)

    return SPEACH_FORMAT

#–í—ã–±—Ä–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—á–∏
async def speach_format_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print('speach_format_choice')
    text = update.message.text
    context.user_data["type_format"] = text
    await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ \"{text}\".", reply_markup=markup_speaker)

    return SPEACH_SPEAKER

# –í—ã–±—Ä–∞–Ω —Å–ø–∏–∫–µ—Ä
async def speach_speaker_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print('speach_speaker_choice')
    text = update.message.text
    context.user_data["type_speaker"] = text
    await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Å–ø–∏–∫–µ—Ä \"{text}\". \n\n"
                                    f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–≤—É—á–∏—Ç—å üìù")

    return SPEACH_TEXT

# –í—ã–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
async def speach_text_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print('speach_text_choice')
    text = update.message.text
    context.user_data["speach_text"] = text
    await update.message.reply_text(f"–¢–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–≤—É—á–∏—Ç—å: \"{text}\".", reply_markup=markup_speach_commit)

    return SPEACH_REPLY

async def speach_commit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print('speach_commit')

    await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
                                    f"–û–ø–µ—Ä–∞—Ü–∏—è: {context.user_data['type_oper']}\n"
                                    f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {context.user_data['type_format']}\n"
                                    f"–°–ø–∏–∫–µ—Ä –æ–∑–≤—É—á–∫–∏: {context.user_data['type_speaker']}\n\n"
                                    f"–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏: {context.user_data['speach_text']}",
                                    reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

#–û—Ç–º–µ–Ω–∞
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print('–≤—ã–∑–≤–∞–ª—Å—è done')

    await update.message.reply_text(
        f"–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. \n–î–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove(),
    )

    context.user_data.clear()
    return ConversationHandler.END

def facts_to_str(user_data: Dict[str, str]) -> str:
    """Helper function for formatting the gathered user info."""
    facts = [f"{key} - {value}" for key, value in user_data.items()]
    return "\n".join(facts).join(["\n", "\n"])

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Echo the user message."""
    await update.message.reply_text(update.message.text)

    #await update.message.reply_voice(voice=open('example.ogg', 'rb'))

    #transcriptor = G2P()
    #kek = transcriptor.getTranscript(update.message.text)
    #await update.message.reply_text(str(kek))

def testFunction(g):
    database = Database()

    while True:
        print(g)
        time.sleep(20)

def main() -> None:
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏
    bgProcGenSpeech = Process(target=testFunction, kwargs={"g": "kek"})
    bgProcGenSpeech.start()

    # –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î
    application = Application.builder().token("5446887600:AAH4OwDd9GfeD0Zl7mpiQso8EI2bsREJuCY").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_OPER: [
                MessageHandler(filters.Regex("^–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏$"), speach_choice),
                MessageHandler(filters.Regex("^–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞$"), report_choice)
            ],
            REPORT_REPLY : [
                MessageHandler(filters.Regex("^–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á—ë—Ç$"), report_commit)
            ],
            SPEACH_FORMAT: [
                MessageHandler(filters.Regex("^(WAV|OGG|MP3)$"), speach_format_choice)
            ],
            SPEACH_SPEAKER: [
                MessageHandler(filters.Regex("^(RUSLAN|–ê—Ä—Ç–µ–º–∏–π –õ–µ–±–µ–¥–µ–≤)$"), speach_speaker_choice)
            ],
            SPEACH_TEXT: [
                MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–û—Ç–º–µ–Ω–∞")), speach_text_choice)
            ],
            SPEACH_REPLY: [
                MessageHandler(filters.Regex("^–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å$"), speach_commit)
            ]
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), done)],
    )

    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == "__main__":
    main()